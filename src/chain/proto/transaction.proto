syntax = "proto3";

package org.brewchain.mcore.model;

message TransactionInfo {
	bytes hash = 1;
	TransactionBody body = 2;
	bytes signature = 3;
//	TransactionStatus status = 4; @deprecated,status apply in result trie
	TransactionNode node = 5;
	int64 accepttimestamp = 6;
}

enum TransactionType{
	NORMAL = 0;
	MULI_SIGN = 1;
	RC20_CONTRACT = 2;
	RC721_CONTRACT = 3;
	XVM_CONTRACT = 4;
	JSVM_CONTRACT = 5;
	EVFS_CONTRACT = 6;//evfs
	CHAIN_CONFIG = 255;
}
message TransactionBody {
	int64 nonce = 1;
	bytes address = 2;
//	repeated TransactionOutput outputs = 3;
	bytes recipient = 3;
	bytes	amount = 4;
	bytes fees = 5;//手续费高位
	int32 inner_codetype = 6; //内置指令交易[0=普通交易,1=多重签名交易(取消),2=类ETH交易，，3=RC721交易(取消)，4=XVM合约调用,5=JSVM合约调用(暂无),6=evfs交易,7=链委员会(暂无),8=链管理员组(暂无)
	bytes code_data = 7; //指令数据
	bytes ext_data = 8;
	int64 timestamp = 9;
	bytes biz_code = 10; //业务代码
	bytes version = 11; //版本
	int32 chainId = 12;
}

message ContractMultiSig {
	//函数操作类型：{
	//1.construct(address managers[],int voteCount) public returns (bool);创建合约
	//2.addManagers(address to[],int voteCount);
	//3.rmManagers(address to[]),int voteCount);
	//}
	enum FunctionMultiSig{
		UNKNOW = 0;
		CONSTRUCT = 1;
		ADDMANAGERS = 2;
		RMMANAGERS = 3;
	}
	FunctionMultiSig	function = 1;//
	repeated  bytes	managers=2;
	bytes   ext_datas = 3;//扩展信息

	string	name = 4;//构建函数时候使用
	string	symbol = 5;//构建函数时候使用
	int32 	min_vote = 6;//最少几个人投票


}
message PBMultsigAccount{
	bytes creator = 1;
	repeated bytes managers = 2;
	int32 min_vote = 3;//至少多少个人签名
}


message TransactionOutput {
	bytes address = 1;
	bytes amount = 2;
	bytes token = 3;
	bytes tokenAmount = 4;
	bytes symbol = 5;
	repeated bytes cryptoToken = 6;
}

message TransactionNode {
	string nid = 1;
	bytes address = 2;
}

message TransactionStatus {
	int32 status = 1;
	bytes result = 2;
//	bytes hash = 3;
	int64 height = 4;
//	int64 timestamp = 5; //for saving storage
	//support for eth like chain client
	repeated bytes logs = 6;
	bytes	logsBloom = 7;
//	int32 blockIndex = 8; //for saving storage
	bytes gasUsed = 9;
	bytes	cumulativeGasUsed = 10;
	bytes contractAddress = 11;
}

message BroadcastTransactionMsg {
	repeated bytes txHash = 1;
	repeated bytes txDatas = 2;
}

